# Rule: notifications

## Scope

Áp dụng cho hệ thống thông báo (in‑app, email, Slack vNext) và activity log. Rule này giúp hệ thống AI hiểu cách gửi thông báo, debounce và log hoạt động.

## Instructions

* **Events** sinh ra thông báo gồm: Task created, Task updated (state change, assignee change, due date change), comment added, attachment added, ScheduledPost status change, mention `@user`, rule-based alerts (triage queue high).  
* Khi có sự kiện, Notification Service tạo notification object với `id`, `recipientId`, `content`, `type` (in‑app/email), `read` (boolean), `createdAt`.  
* In‑app notification hiển thị dưới dạng bell icon với badge; email được gửi qua dịch vụ mail (Sendgrid, SES…).  
* Debounce: nếu nhiều sự kiện xảy ra liên tục cho cùng Task (ví dụ liên tục update trạng thái), gộp lại và gửi một thông báo tổng hợp sau X phút (configurable).  
* Digest email: gửi email tổng hợp các thông báo chưa đọc mỗi ngày hoặc tuần (vNext).

## Activity log

* Mỗi hành động quan trọng (create/update/delete) ghi vào Activity: `{id, actorId, entityType, entityId, action, timestamp, changes}`.  
* Activity được hiển thị trong trang Task/Project/Strategic; có thể filter theo loại hành động (status change, comment, file attach).  
* Audit log (ẩn) lưu chi tiết để đáp ứng yêu cầu chứng nhận SOC 2.

## Contracts

* API `GET /notifications` trả về danh sách thông báo; có pagination, filter `read/unread`.  
* API `PATCH /notifications/{id}` đánh dấu đã đọc; có thể đánh dấu tất cả.  
* Notification Service cần module `scheduler` để gửi digest email định kỳ (cron job).  
* Activity chỉ hiển thị cho người có quyền truy cập entity (Task/Project/Strategic).  
* Khi gửi mention `@user`, phải validate user tồn tại và thuộc workspace.

## Anti‑patterns

* Không gửi email cho mọi sự kiện; chỉ gửi khi quan trọng hoặc khi được user thiết lập.  
* Không ghi đè Activity log; log cần immutable để phục vụ kiểm toán.