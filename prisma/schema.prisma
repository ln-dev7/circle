generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
  analyticsEvents AnalyticsEvent[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  oauth_token_secret String?
  oauth_token       String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App models
model Organization {
  id             String          @id @default(cuid())
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  memberships    Membership[]
  campaigns      Campaign[]
  analyticsEvents AnalyticsEvent[]
}

model Membership {
  id             String     @id @default(cuid())
  userId         String
  organizationId String
  role           OrgRole
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

enum OrgRole {
  ADMIN
  BRAND_OWNER
  CREATOR
}

model Campaign {
  id             String          @id @default(cuid())
  name           String
  description    String?
  organizationId String
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  contents       Content[]
  schedules      Schedule[]
  analyticsEvents AnalyticsEvent[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Content {
  id             String          @id @default(cuid())
  title          String
  body           String?
  campaignId     String
  campaign       Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  assets         Asset[]
  schedules      Schedule[]
  analyticsEvents AnalyticsEvent[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Asset {
  id          String   @id @default(cuid())
  url         String
  name        String?
  type        String
  size        Int?
  description String?
  tags        String[]
  contentId   String
  content     Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Schedule {
  id         String   @id @default(cuid())
  date       DateTime
  status     String
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contentId  String?
  content    Content? @relation(fields: [contentId], references: [id], onDelete: SetNull)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model AnalyticsEvent {
  id             String      @id @default(cuid())
  event          String
  data           Json?
  userId         String?
  user           User?       @relation(fields: [userId], references: [id])
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  campaignId     String?
  campaign       Campaign?   @relation(fields: [campaignId], references: [id])
  contentId      String?
  content        Content?    @relation(fields: [contentId], references: [id])
  createdAt      DateTime    @default(now())
}
