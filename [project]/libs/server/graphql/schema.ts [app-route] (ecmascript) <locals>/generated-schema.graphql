# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type CLICommand {
   args: [String!]!
   category: String!
   description: String!
   examples: [String!]
   name: String!
   parseOutput: Boolean!
   requiredArgs: [String!]!
   timeout: Float!
}

type CLIExecutionStats {
   averageExecutionTime: Float!
   commandFrequency: String!
   failedExecutions: Float!
   successRate: Float!
   successfulExecutions: Float!
   totalExecutions: Float!
}

input CLIHistoryFilter {
   command: String
   endDate: DateTime
   startDate: DateTime
   success: Boolean
}

type CLIHistoryItem {
   args: String!
   command: String!
   error: String
   executionTime: Float!
   id: ID!
   output: String!
   success: Boolean!
   timestamp: DateTime!
}

type CLIProcess {
   id: ID!
   startTime: String!
   status: String!
}

type CLIStatus {
   activeProcessCount: Float!
   activeProcesses: [CLIProcess!]!
   error: String
   executionStats: CLIExecutionStats!
   isHealthy: Boolean!
   recentCommands: [CLIHistoryItem!]!
   systemInfo: CLISystemInfo!
   timestamp: DateTime!
}

type CLISystemInfo {
   architecture: String!
   cwd: String!
   memoryUsage: String!
   nodeVersion: String!
   pid: Float!
   platform: String!
   uptime: Float!
}

enum ConflictResolution {
   CLI_WINS
   LAST_WRITE_WINS
   MERGE
   UI_WINS
   USER_RESOLVE
}

input CreateIssueInput {
   assigneeId: ID
   description: String!
   dueDate: DateTime
   labelIds: [ID!]! = []
   priorityId: ID!
   projectId: ID!
   rank: String
   statusId: ID
   title: String!
}

input CreateLabelInput {
   color: String!
   name: String!
}

input CursorPaginationInput {
   after: String
   before: String
   first: Int = 20
   last: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Issue {
   assignee: User
   createdAt: DateTime!
   cycleId: String
   description: String!
   dueDate: DateTime
   id: ID!
   identifier: String!
   issueType: IssueType!
   labels: [Label!]!
   parentIssue: Issue
   parentIssueId: String
   priority: String!
   project: Project
   rank: String!
   status: String!
   subIssues: [Issue!]
   subissues: [String!]
   subtaskId: String
   task: Task
   taskId: Int
   title: String!
   updatedAt: DateTime!
}

enum IssueChangeType {
   ASSIGNED
   CREATED
   DELETED
   LABEL_ADDED
   LABEL_REMOVED
   PRIORITY_CHANGED
   STATUS_CHANGED
   UPDATED
}

type IssueConnection {
   edges: [IssueEdge!]!
   nodes: [Issue!]!
   pageInfo: PageInfo!
   totalCount: Int!
}

type IssueEdge {
   cursor: String!
   node: Issue!
}

input IssueFilterInput {
   assigneeIds: [ID!]
   labelIds: [ID!]
   priorityIds: [ID!]
   projectIds: [ID!]
   search: String
   statusIds: [ID!]
}

input IssueOrderByInput {
   direction: String
   field: String
}

input IssueSubscriptionFilter {
   assigneeIds: [ID!]
   issueIds: [ID!]
   priorityIds: [ID!]
   projectIds: [ID!]
   statusIds: [ID!]
}

enum IssueType {
   SUBTASK
   TASK
}

type IssueUpdatePayload {
   changeType: IssueChangeType!
   issue: Issue!
   previousState: String
   source: String!
   timestamp: DateTime!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Label {
   color: String!
   createdAt: DateTime!
   description: String
   id: ID!
   name: String!
   updatedAt: DateTime!
}

type LabelConnection {
   edges: [LabelEdge!]!
   nodes: [Label!]!
   pageInfo: PageInfo!
   totalCount: Int!
}

type LabelEdge {
   cursor: String!
   node: Label!
}

input LabelFilterInput {
   name: String
   search: String
}

type Mutation {
   createIssue(input: CreateIssueInput!): Issue!
   createLabel(input: CreateLabelInput!): Label!
   deleteIssue(id: String!): Boolean!
   deleteLabel(id: String!): Boolean!
   forceSync(reason: String): Boolean!
   triggerSync(input: TriggerSyncInput): SyncOperation!
   updateIssue(id: String!, input: UpdateIssueInput!): Issue!
   updateLabel(id: String!, input: UpdateLabelInput!): Label!
   updateTaskStatus(source: String! = "ui", status: TaskStatus!, taskId: String!): SyncOperation!
}

type PageInfo {
   endCursor: String
   hasNextPage: Boolean!
   hasPreviousPage: Boolean!
   startCursor: String
}

input PaginationInput {
   after: String
   before: String
   first: Int
   limit: Int
}

type Priority {
   color: String!
   icon: String!
   id: ID!
   name: String!
}

type Project {
   color: String!
   createdAt: DateTime!
   description: String
   icon: String
   id: ID!
   identifier: String!
   issues: [Issue!]!
   lead: User
   members: [User!]!
   name: String!
   priority: Priority!
   status: Status!
   updatedAt: DateTime!
}

type ProjectConnection {
   edges: [ProjectEdge!]!
   nodes: [Project!]!
   pageInfo: PageInfo!
   totalCount: Int!
}

type ProjectEdge {
   cursor: String!
   node: Project!
}

input ProjectFilterInput {
   leadIds: [ID!]
   search: String
   statusIds: [ID!]
}

type Query {
   availableCommands: [CLICommand!]!
   cliCommand(name: String!): CLICommand
   cliHistory(filter: CLIHistoryFilter, limit: Float = 50): [CLIHistoryItem!]!
   cliStatus: CLIStatus!
   issue(id: String!): Issue
   issues(
      filter: IssueFilterInput
      orderBy: [IssueOrderByInput!]
      pagination: PaginationInput
   ): IssueConnection!
   label(id: String!): Label
   labels(filter: LabelFilterInput, pagination: PaginationInput): LabelConnection!
   priorities: [Priority!]!
   project(id: String!): Project
   projects(filter: ProjectFilterInput, pagination: PaginationInput): ProjectConnection!
   readyTasks(limit: Float, offset: Float): [Task!]!
   searchIssues(
      filter: IssueFilterInput
      orderBy: [IssueOrderByInput!]
      pagination: PaginationInput
      query: String!
   ): IssueConnection!
   searchTasks(options: TaskOptions, searchText: String!): [Task!]!
   statuses: [Status!]!
   syncConflicts(limit: Float! = 20, resolved: Boolean): [SyncConflict!]!
   syncHealth: SyncHealth!
   syncOperation(id: String!): SyncOperation
   syncOperations(filter: String, limit: Int! = 50, orderBy: String): [SyncOperation!]!
   syncStatus: SyncStatus!
   task(id: Int!, options: TaskOptions): Task
   taskStats: TaskStats!
   tasks(filters: TaskFilters, options: TaskOptions, orderBy: TaskOrderBy): [Task!]!
   tasksConnection(
      filters: TaskFilters
      orderBy: TaskOrderBy
      pagination: CursorPaginationInput
   ): TaskConnection!
   teams: [Team!]!
   user(id: String!): User
   users(filter: UserFilterInput, pagination: PaginationInput): UserConnection!
}

type Status {
   color: String!
   icon: String
   id: ID!
   name: String!
}

type Subscription {
   issueUpdated(filter: IssueSubscriptionFilter): IssueUpdatePayload!
   syncOperationUpdated(filter: SyncOperationSubscriptionFilter): SyncOperationPayload!
}

type Subtask {
   createdAt: DateTime!
   dependencies: [String!]
   description: String!
   details: String
   fullId: String!
   id: ID!
   status: TaskStatus!
   testStrategy: String
   title: String!
   updatedAt: DateTime!
}

enum SyncChangeType {
   COMPLETED
   CONFLICT_DETECTED
   CONFLICT_RESOLVED
   FAILED
   PROGRESS
   STARTED
}

type SyncConflict {
   cliVersion: JSONObject!
   id: ID!
   operationType: SyncOperationType!
   resolution: ConflictResolution
   resolved: Boolean!
   resolvedAt: DateTime
   taskId: ID!
   timestamp: DateTime!
   uiVersion: JSONObject!
}

type SyncError {
   code: String!
   details: JSONObject
   message: String!
   operationId: ID
}

type SyncHealth {
   error: String
   issues: [String!]!
   lastCheck: DateTime!
   metrics: SyncHealthMetrics!
   recommendations: [String!]!
   score: Int!
   status: String!
   syncState: SyncState!
   uptime: Float!
}

type SyncHealthMetrics {
   activeOperations: Int!
   queueSize: Int!
   recentFailureRate: Int!
   stalledOperations: Int!
   unresolvedConflicts: Int!
}

type SyncOperation {
   completedAt: DateTime
   error: SyncError
   id: ID!
   metadata: JSONObject
   retryCount: Int!
   source: String!
   status: SyncOperationStatus!
   taskIds: [ID!]!
   timestamp: DateTime!
   type: SyncOperationType!
}

type SyncOperationPayload {
   changeType: SyncChangeType!
   operation: SyncOperation!
   timestamp: DateTime!
}

enum SyncOperationStatus {
   CANCELLED
   COMPLETED
   EXECUTING
   FAILED
   PENDING
}

input SyncOperationSubscriptionFilter {
   operationIds: [ID!]
   statuses: [SyncOperationStatus!]
   types: [SyncOperationType!]
}

enum SyncOperationType {
   BATCH_UPDATE
   FILE_SYNC
   FULL_SYNC
   STATUS_CHANGE
   TASK_CREATE
   TASK_DELETE
   TASK_UPDATE
}

enum SyncState {
   ERROR
   IDLE
   SYNCING
}

type SyncStatus {
   conflicts: [SyncConflict!]!
   operations: [SyncOperation!]!
   optimisticUpdatesCount: Int!
   queueSize: Int!
   state: SyncState!
}

type Task {
   complexity: Int
   createdAt: DateTime!
   dependencies: [Int!]
   description: String!
   details: String
   id: ID!
   priority: TaskPriority!
   status: TaskStatus!
   subtasks: [Subtask!]
   testStrategy: String
   title: String!
   updatedAt: DateTime!
}

type TaskConnection {
   edges: [TaskEdge!]!
   pageInfo: PageInfo!
   totalCount: Int!
}

type TaskEdge {
   cursor: String!
   node: Task!
}

input TaskFilters {
   hasDependencies: Boolean
   hasSubtasks: Boolean
   ids: [Int!]
   priority: [TaskPriority!]
   search: String
   status: [TaskStatus!]
}

input TaskOptions {
   includeSubtasks: Boolean = true
   limit: Int
   offset: Int
}

input TaskOrderBy {
   direction: String!
   field: String!
}

"""
Task priority levels
"""
enum TaskPriority {
   HIGH
   LOW
   MEDIUM
}

type TaskPriorityCount {
   high: Int
   low: Int
   medium: Int
}

type TaskStats {
   tasksByPriority: TaskPriorityCount
   tasksByStatus: TaskStatusCount
   totalSubtasks: Int!
   totalTasks: Int!
}

"""
Task status values
"""
enum TaskStatus {
   BLOCKED
   CANCELLED
   DEFERRED
   DONE
   IN_PROGRESS
   PENDING
}

type TaskStatusCount {
   blocked: Int
   cancelled: Int
   deferred: Int
   done: Int
   inProgress: Int
   pending: Int
}

type Team {
   createdAt: DateTime!
   description: String
   id: ID!
   identifier: String!
   members: [User!]!
   name: String!
   projects: [Project!]!
}

input TriggerSyncInput {
   description: String
   force: Boolean! = false
   priority: String! = "normal"
   type: String! = "incremental"
}

input UpdateIssueInput {
   assigneeId: ID
   description: String
   dueDate: DateTime
   labelIds: [ID!]
   priorityId: ID
   rank: String
   statusId: ID
   title: String
}

input UpdateLabelInput {
   color: String
   name: String
}

type User {
   assignedIssues: [Issue!]!
   avatarUrl: String!
   createdAt: DateTime!
   email: String!
   id: ID!
   joinedDate: DateTime!
   name: String!
   role: UserRole!
   status: UserStatus!
   teamIds: [ID!]!
   updatedAt: DateTime!
}

type UserConnection {
   edges: [UserEdge!]!
   nodes: [User!]!
   pageInfo: PageInfo!
   totalCount: Int!
}

type UserEdge {
   cursor: String!
   node: User!
}

input UserFilterInput {
   role: UserRole
   search: String
   status: UserStatus
   teamIds: [ID!]
}

enum UserRole {
   ADMIN
   GUEST
   MEMBER
}

enum UserStatus {
   AWAY
   OFFLINE
   ONLINE
}
